<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi='http://www.w3.org/2001/XInclude'
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="how"
         version="5.2">
<title>How it works</title>

<para>At the end of the day, parsing an input against an Invisible XML
grammar is really parsing that input against an Earley grammar
constructed to recognize the same set of inputs (sometimes called
“sentences”). When everything works, this is completely concealed.
Unfortunately, when things go wrong,
<application>coffeepot</application> can do little but show you the
underlying grammar.</para>

<para>You can peek at this directly, even on a successful parse, with the
<option>--show-grammar</option> option.</para>

<para>The Invisible XML grammar is much more directly expressive than the rules
allowed by the Earley parser. The Earley parser accepts a set of rules that
map nonterminals to a flat sequence of symbols (either terminals or nonterminals).
The underlying grammar has no direct support for optionality or repeatability.
</para>

<para>In order to support these “higher level” concepts, the parser rewrites the rules
in terms of additional nonterminals. (Some of these rewrites are described
in the <link xlink:href="https://invisiblexml.org/ixml-specification.html#hints">Hints
for Implementors</link> section of the Invisible XML specification.)</para>

<para>Let’s look at some examples.</para>

<section xml:id="earleymapping01">
<title>Mapping a simple rule</title>

<para>Simple rules, like a match for “aba”, map in a straightforward way.</para>

<example xml:id="em01">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em01.ixml"/>
</programlisting>
</example>

<para>The resulting Earley grammar has introduced a new nonterminal “$$” as the start
symbol. This means that all of the grammars will have the same
start symbol, irrespective of the users grammar.</para>

<example xml:id="em01g">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em01.grammar"/>
</programlisting>
</example>

</section>

<section xml:id="earleymapping02">
<title>Mapping alternatives</title>

<para>An Invisible XML grammar must have exactly one rule for each nonterminal.
Alternatives must be expressed in that single rule:</para>

<example xml:id="em02">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em02.ixml"/>
</programlisting>
</example>

<para>In the Earley grammar, there are no alternatives, but there is no
prohibition on multiple rules for the same nonterminal.</para>

<example xml:id="em02g">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em02.grammar"/>
</programlisting>
</example>

</section>

<section xml:id="earleymapping03">
<title>Mapping “x?”</title>

<para>Invisible XML uses “?” to express that a symbol is optional.</para>

<example xml:id="em03">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em03.ixml"/>
</programlisting>
</example>

<para>Optionality is implemented by having a new rule where the right
hand side is either “nothing” symbolized by the greek letter ε or the
other alternative. When CoffeeGrinder has to introduce new symbols, it
names them things like “$1_b-optionⁿ”. The leading “$1_” (or “$2_”,
“$3_”, etc.) just makes the name unique. What follows is an attempt to
describe the rule “b-option”. The superscript “ⁿ” tells you that this
rule can match nothing. (Rules that match nothing are a common source
of ambiguity, so it’s handy to be able to see them at a glance.)</para>

<example xml:id="em03g">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em03.grammar"/>
</programlisting>
</example>

</section>

<!--
<section xml:id="earleymapping03b">
<title>Mapping “(x1, x2)?”</title>

<para>Making a group optional <emphasis>does</emphasis> require the introduction
of a new nonterminal. The Earley parser doesn’t know anything about groups.</para>

<example xml:id="em03b">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em03b.ixml"/>
</programlisting>
</example>

<para>Most nonterminals are just numeric. A few, like the rewrite for optionality,
include some other description of their purpose. There’s no obvious way to provide
meaningful names for the nonterminals introduced during rewriting. Attempting to decorate
the names of the nonterminals in the original grammar produces much longer names
which have drawbacks of their own.</para>

<example xml:id="em03bg">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em03b.grammar"/>
</programlisting>
</example>

</section>
-->

<section xml:id="earleymapping04">
<title>Mapping “x*”</title>

<para>Invisible XML uses “*” to express that a symbol may be repeated 
zero or more times.</para>

<example xml:id="em04">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em04.ixml"/>
</programlisting>
</example>

<para>This requires a couple of new nonterminals.</para>

<para>Pay particular attention to nullable nonterminals, either your own or
ones introduced by rewriting. The most common source of ambiguity in a grammar is
to allow more than one nonterminal at a particular location to map to ε.</para>

<example xml:id="em04g">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em04.grammar"/>
</programlisting>
</example>

</section>

<section xml:id="earleymapping05">
<title>Mapping “x+”</title>

<para>Invisible XML uses “+” to express that a symbol may be repeated 
one or more times.</para>

<example xml:id="em05">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em05.ixml"/>
</programlisting>
</example>

<para>Requires this new nonterminal.</para>

<example xml:id="em05g">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em05.grammar"/>
</programlisting>
</example>
</section>

<section xml:id="earleymapping06">
<title>Mapping “x1**x2”</title>

<para>Invisible XML uses “**” between two symbols to indicate
that the first symbol may be repeated zero or more times, separated by
the second. For example, <code>name*','</code> accepts zero or more names
(however they’re defined) separated by commas.</para>

<para>This is a clever syntactic convenience for authors.</para>

<example xml:id="em06">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em06.ixml"/>
</programlisting>
</example>

<para>It’s a bit of a mess for the Earley grammar.</para>

<example xml:id="em06g">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em06.grammar"/>
</programlisting>
</example>
</section>

<section xml:id="earleymapping07">
<title>Mapping “x1++x2”</title>

<para>Invisible XML uses “++” between two symbols to indicate
that the first symbol may be repeated one or more times, separated by
the second.</para>

<example xml:id="em07">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em07.ixml"/>
</programlisting>
</example>

<para>Also a bit of a mess for the Earley grammar.</para>

<example xml:id="em07g">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em07.grammar"/>
</programlisting>
</example>

</section>

<section xml:id="earleymapping08">
<title>Mapping ¯\_(ツ)_/¯</title>

<para>Of course, the syntax allows these rules to be mixed
more-or-less arbitrarily.</para>

<example xml:id="em08">
<title>The Invisible XML grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em08.ixml"/>
</programlisting>
</example>

<para>Consequently, real grammars tend to be quite messy. (Not that I’d call this
a real grammar in any useful sense.)</para>

<example xml:id="em08g">
<title>The Earley grammar</title>
<programlisting linenumbering="unnumbered"
  ><xi:include parse="text" href="examples/em08.grammar"/>
</programlisting>
</example>
</section>

<section xml:id="dashetc">
<title>A word about “-”, “@”, and “^”</title>

<para>The marks added to the grammar that reflect how (or if) a symbol
should be output have no effect on the rule rewriting. They’re handled as attributes on
the symbols.</para>
</section>

<section xml:id="insertions">
<title>Insertions</title>
<para>T.B.D.</para>
</section>

</chapter>
