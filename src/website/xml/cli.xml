<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi='http://www.w3.org/2001/XInclude'
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="running"
         version="5.2">
<title>Running CoffeePot</title>

<para><application>CoffeePot</application> can be run directly from the jar file
with a command like:</para>

<programlisting linenumbering="unnumbered"
><command>java</command> <option>-jar</option> coffeepot-<?version?>.jar <replaceable>options</replaceable></programlisting>

<para>It may be more convenient, however, to write a small batch file or shell script
to run it with an explicit classpath, <xref linkend="configuration"/>.</para>

<section xml:id="cli">
<title>The command line</title>

<para>Typical usage is:</para>

<cmdsynopsis>
<command>coffeepot</command>
<arg>--pretty-print</arg>
<arg>--parse:<replaceable>number</replaceable></arg>
<arg>--grammar:<replaceable>file</replaceable></arg>
<arg>--output:<replaceable>file</replaceable></arg>
<group>
  <arg>--input:<replaceable>file</replaceable></arg>
  <arg rep="repeat" choice="plain"><replaceable>input</replaceable></arg>
</group>
</cmdsynopsis>

<para>(For a quick recap of all the possible options, run
<application>CoffeeJar</application> with the <option>--help</option> option.)</para>

<para>Where:</para>

<variablelist>
<varlistentry>
<term><option>--pretty-print</option></term>
<listitem>
<para>Specifies that XML output should be formatted with line breaks and indentation.
Note: the built-in pretty printer is a little bit crude, especially in the face
of mixed content.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--parse:<replaceable>number</replaceable></option></term>
<listitem>
<para>Selects a specific parse. If the parse was ambiguous, use this
option to inspect alternate parses. (If the parse wasn’t
ambiguous, there’s only one.) You can also use
<link linkend="o.parse-count">--parse-count</link> to display more than one
parse.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--grammar:<replaceable>file</replaceable></option></term>
<listitem>
<para>Specifies the input grammar. If unspecified, the Invisible XML specification
grammar is used. The grammar specified may be an Invisible XML grammar in either
the text or XML formats, or a compiled grammar saved with the
<link linkend="compiled-grammar-option">--compiled-grammar option</link>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--output:<replaceable>file</replaceable></option></term>
<listitem>
<para>Specifies the output location, defaults to standard output.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--input:<replaceable>file</replaceable></option></term>
<listitem>
<para>Specifies the input file. If unspecified, the remaining command line arguments
are taken as the input, separated by single spaces.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>The following additional options are also available:</para>

<variablelist>
<varlistentry xml:id="compiled-grammar-option">
<term><option>--compiled-grammar:<replaceable>file</replaceable></option></term>
<listitem>
<para>Specifies that a compiled version of the grammar should be saved to the
specified file.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--describe-ambiguity</option></term>
<listitem>
<para>Requests a desription of where in the parse forest ambiguity arose.
This option only applies to ambiguous parses.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--format:<replaceable>type</replaceable></option></term>
<listitem>
<para>Requests a specific format type. Available types are <code>xml</code>,
the default, <code>json</code> or <code>json-data</code>, <code>json-tree</code>
or <code>json-text</code>, or <code>csv</code>.</para>
<para>The <code>json-data</code> format is only possible for result
trees that contain no mixed content.</para>
<para>The <code>csv</code> format is only possible for result trees that have a
specific “shape”. The grand-children of the root element must all be atomic values
and no mixed content is allowed.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--graph-svg:<replaceable>file</replaceable></option></term>
<listitem>
<para>Output an SVG diagram of the parse forest to the file. This option
will only work if GraphViz has <link linkend="configuration">been configured</link>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--graph-xml:<replaceable>file</replaceable></option></term>
<listitem>
<para>Output an XML representation of the structure of the parse forest.
This is intended as the input to visualization processes, like the SVG output.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--log:<replaceable>levels</replaceable></option></term>
<listitem>
<para>Sets the log level, one of <literal>silent</literal>,
<literal>error</literal>, <literal>warning</literal>,
<literal>info</literal>, <literal>debug</literal>, or
<literal>trace</literal>. It can also set logging at finer granularities
by specifying a list of logger:level pairs, for example:
<literal>CoffeePot:trace,CoffeeGrinder:info,CoffeeFilter:warning</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--no-output</option></term>
<listitem>
<para>Suppress output of the parse tree.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="o.parse-count">
<term><option>--parse-count:<replaceable>number</replaceable>|all</option></term>
<listitem>
<para>For an ambiguous parse, you can specify a parse count greater than one
to get several (or <literal>all</literal>) the possible parses. It is not an error
if you get multiple parses that have the same XML structure, this simply indicates that the
ambiguity was in some part of the result that wasn’t serialized.
</para>
<para>No attempt is made to enumerate the infinitely many possible
parses that arise if the resulting parse forest contains a loop.
Consequently, it’s possible to get an “infinitely ambiguous” result
that has only a single parse.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--show-chart</option></term>
<listitem>
<para>Show the state chart used by the parser.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--show-grammar</option></term>
<listitem>
<para>Show the grammar used by the parser.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--suppress:<replaceable>state:state:…</replaceable></option></term>
<listitem>
<para>Suppress <code>ixml:state</code> values. The <code>ambiguous</code>
and <code>prefix</code> states can be suppressed.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--time</option></term>
<listitem>
<para>Enables output of parse timings.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--tree-svg:<replaceable>file</replaceable></option></term>
<listitem>
<para>Output an SVG diagram of the parse tree to the file. This option
will only work if GraphViz has <link linkend="configuration">been configured</link>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--tree-xml:<replaceable>file</replaceable></option></term>
<listitem>
<para>Output an XML representation of the structure of the parse tree.
This is intended as the input to visualization processes, like the SVG output.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><option>--version</option></term>
<listitem>
<para>Display the <application>CoffeePot</application> version number.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="buildtools">
<title>In build tools</title>

<para>The <link xlink:href="https://github.com/nineml/HOWTO">HOWTO</link> repository
contains examples of using <application>CoffeePot</application> in build tools
such as Gradle.</para>

</section>
</chapter>
