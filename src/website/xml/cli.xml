<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi='http://www.w3.org/2001/XInclude'
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="running"
         version="5.2">
<title>Running CoffeePot</title>

<para><application>CoffeePot</application> can be run directly from the jar file
with a command like:</para>

<programlisting linenumbering="unnumbered"
><command>java</command> <option>-jar</option> coffeepot-<?version?>.jar <replaceable>options</replaceable></programlisting>

<para>It may be more convenient, however, to write a small batch file or shell script
to run it with an explicit classpath, <xref linkend="configuration"/>.</para>

<para>In the examples that follow, we assume that “<code>coffeepot</code>” will run
<application>CoffeePot</application>. Depending on how you’ve installed it, you may have to
substitute <code>java -jar /path/to/coffeepot.jar</code> or some other variation.</para>

<section xml:id="cli">
<title>The command line</title>

<para>Typical usage is:</para>

<cmdsynopsis>
<command>coffeepot</command>
<arg>--pretty-print</arg>
<arg>--parse:<replaceable>number</replaceable></arg>
<arg>--grammar:<replaceable>file</replaceable></arg>
<arg>--output:<replaceable>file</replaceable></arg>
<group>
  <arg>--input:<replaceable>file</replaceable></arg>
  <arg rep="repeat" choice="plain"><replaceable>input</replaceable></arg>
</group>
</cmdsynopsis>

<para>(For a quick recap of all the possible options, run
<application>CoffeeJar</application> with the <option>--help</option> option.)</para>

<para>Where:</para>

<variablelist>
<varlistentry xml:id="_pretty-print">
<term><option>--pretty-print</option></term>
<listitem>
<para>Specifies that XML output should be formatted with line breaks and indentation.
Note: the built-in pretty printer is a little bit crude, especially in the face
of mixed content.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_parse">
<term><option>--parse:<replaceable>number</replaceable></option></term>
<listitem>
<para>Selects a specific parse. If the parse was ambiguous, use this
option to inspect alternate parses. (If the parse wasn’t
ambiguous, there’s only one.) You can also use
<option linkend="_parse-count">--parse-count</option> to display more than one
parse.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_grammar">
<term><option>--grammar:<replaceable>file</replaceable></option></term>
<listitem>
<para>Specifies the input grammar. If unspecified, the Invisible XML specification
grammar is used. The grammar specified may be an Invisible XML grammar in either
the text or XML formats.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_output">
<term><option>--output:<replaceable>file</replaceable></option></term>
<listitem>
<para>Specifies the output location, defaults to standard output.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_input">
<term><option>--input:<replaceable>file</replaceable></option></term>
<listitem>
<para>Specifies the input file. If unspecified, the remaining command line arguments
are taken as the input, separated by single spaces.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>The following additional options are also available:</para>

<variablelist>
<varlistentry xml:id="_analyze-ambiguity" revisionflag="added">
<term><option>--analyze-ambiguity</option></term>
<listitem>
<para>Applies Anders Møller’s
<link xlink:href="https://www.brics.dk/grammar/">ambiguity analyzer</link> to the grammar.
This can help to identify where ambiguity occurs and what inputs will trigger it. The analyzer
operates on the <link linkend="how">transformed grammar</link>.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_bnf" revisionflag="added">
<term><option>--bnf</option></term>
<listitem>
<para>Checks if the grammar is a “plain BNF” grammar. This doesn’t
changer the parser, it simply reports if the grammar is BNF. (Why?
Well, if you’re interested in exploring a tool like the ambiguity
analyzer, the results can be easier to understand if the input grammar hasn’t been
transformed in any way. This option let’s you check if that’s the case.)
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_choose">
<term><option>--choose:<replaceable>XPath-expression</replaceable></option></term>
<listitem>
<para>Use the XPath expression to select among ambiguous alternatives.
See <xref linkend="choose-alternative"/>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_config" revisionflag="added">
<term><option>--config:<replaceable>file</replaceable></option></term>
<listitem>
<para>Load a specific <link linkend="configuration">configuration file</link>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_describe-ambiguity">
<term><option>--describe-ambiguity</option></term>
<listitem>
<para>Requests a desription of where in the parse forest ambiguity arose.
This option only applies to ambiguous parses. See also, <xref linkend="describe-ambiguity"/>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_describe-ambiguity-with">
<term><option>--describe-ambiguity-with:<replaceable>format</replaceable></option></term>
<listitem>
<para>Selects how ambiguity will be described. Implies <option>--describe-ambiguity</option>.
</para>
<para>The options are <code>text</code>, <code>xml</code>, and <code>api-xml</code>.
See <xref linkend="describe-ambiguity"/>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_disable-pragma" revisionflag="added">
<term><option>--disable-pragma:<replaceable>pragma</replaceable></option></term>
<listitem>
<para>Disables the specified pragma for this parse.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_earley" revisionflag="added">
<term><option>--earley</option></term>
<listitem>
<para>Use the Earley parser. Alternatively, <option>--gll</option>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_encoding" revisionflag="added">
<term><option>--encoding:<replaceable>encoding-name</replaceable></option></term>
<listitem>
<para>Use <replaceable>encoding-name</replaceable> when parsing the input.
This must be an encoding name recognized by Java. See also
<option linkend="_grammar-encoding">--grammar-encoding</option>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_format">
<term><option>--format:<replaceable>type</replaceable></option></term>
<listitem>
<para>Requests a specific format type. Available types are <code>xml</code>,
the default, <code>json</code> or <code>json-data</code>, <code>json-tree</code>
or <code>json-text</code>, or <code>csv</code>.</para>
<para>The <code>json-data</code> format is only possible for result
trees that contain no mixed content.</para>
<para>The <code>csv</code> format is only possible for result trees that have a
specific “shape”. The grand-children of the root element must all be atomic values
and no mixed content is allowed.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_function-library">
<term><option>--function-library:<replaceable>library</replaceable></option></term>
<listitem>
<para>Load a function library to select among ambiguous alternatives.
See <xref linkend="choose-alternative"/>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_gll" revisionflag="added">
<term><option>--gll</option></term>
<listitem>
<para>Use the GLL parser. Alternatively, <option>--earley</option>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_grammar-encoding" revisionflag="added">
<term><option>--grammar-encoding:<replaceable>encoding-name</replaceable></option></term>
<listitem>
<para>Use <replaceable>encoding-name</replaceable> when parsing the input grammar.
This must be an encoding name recognized by Java. See also
<option linkend="_encoding">--encoding</option>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_graph-svg">
<term><option>--graph-svg:<replaceable>file</replaceable></option></term>
<listitem>
<para>Output an SVG diagram of the parse forest to the file. This option
will only work if GraphViz has <link linkend="configuration">been configured</link>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_graph-svg-option" revisionflag="added">
<term><option>--graph-svg-option:<replaceable>option=value</replaceable></option></term>
<listitem>
<para>Passes the specified <code>$option</code> with <literal>value</literal> to the stylesheet 
that generates the SVG. See <xref linkend="diagrams"/>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_graph-xml">
<term><option>--graph-xml:<replaceable>file</replaceable></option></term>
<listitem>
<para>Output an XML representation of the structure of the parse forest.
This is intended as the input to visualization processes, like the SVG output.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_log">
<term><option>--log:<replaceable>levels</replaceable></option></term>
<listitem>
<para>Sets the log level, one of <literal>silent</literal>,
<literal>error</literal>, <literal>warning</literal>,
<literal>info</literal>, <literal>debug</literal>, or
<literal>trace</literal>. It can also set logging at finer granularities
by specifying a list of logger:level pairs, for example:
<literal>CoffeePot:trace,CoffeeGrinder:info,CoffeeFilter:warning</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_no-output">
<term><option>--no-output</option></term>
<listitem>
<para>Suppress output of the parse tree.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_omit-csv-headers" revisionflag="added">
<term><option>--omit-csv-headers</option></term>
<listitem>
<para>When generating CSV output, the nonterminal names are used as column headers
by default. This option causes them to be omitted.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_parse-count">
<term><option>--parse-count:<replaceable>number</replaceable>|all</option></term>
<listitem>
<para>For an ambiguous parse, you can specify a parse count greater than one
to get several (or <literal>all</literal>) the possible parses. It is not an error
if you get multiple parses that have the same XML structure, this simply indicates that the
ambiguity was in some part of the result that wasn’t serialized.
</para>
<para>No attempt is made to enumerate the infinitely many possible
parses that arise if the resulting parse forest contains a loop.
Consequently, it’s possible to get an “infinitely ambiguous” result
that has only a single parse.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_pedantic">
<term><option>--pedantic</option></term>
<listitem>
<para>By default, <application>CoffeePot</application> accepts
certain grammar extensions, such as pragmas. With this option,
only grammars strictly conforming to the Invisible XML specification
may be used.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_priority-style" revisionflag="added">
<term><option>--priority-style:<replaceable>style</replaceable></option></term>
<listitem>
<para>There are two styles for managing priorities: <literal>max</literal> and <literal>sum</literal>.
If the style is <literal>max</literal> (the default), the priority of a node in the graph is
the same as the highest priority among its descendants. 
If the style is <literal>sum</literal>, the priority of a node in the graph is
the sum of the priorities of its descendants. In either case, if a node has an explicity priority,
that priority takes precedence.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_progress-bar">
<term><option>--progress-bar:<replaceable>value</replaceable></option></term>
<listitem>
<para>Allows you to specify that the progress bar should be <literal>on</literal>,
<literal>off</literal>, or only on if the output is going to a
<link xlink:href="https://en.wikipedia.org/wiki/Computer_terminal">TTY</link> (<literal>tty</literal>).
The default for this option can be set in the
<link linkend="configuration">configuration file</link>.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_record-end">
<term><option>--record-end:<replaceable>regular-expression</replaceable></option></term>
<listitem>
<para>Specifies that the input should be parsed as a set of records delimited
by the regular expression provided at the end of each record.
(Implies <option>--records</option>.)
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_record-start">
<term><option>--record-start:<replaceable>regular-expression</replaceable></option></term>
<listitem>
<para>Specifies that the input should be parsed as a set of records delimited
by the regular expression provided at the start of each record.
(Implies <option>--records</option>.)
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_records">
<term><option>--records</option></term>
<listitem>
<para>Specifies that the input should be parsed as a set of records. If neither
<option>--record-start</option> or <option>--record-end</option> is provided, the
default separator is the record-ending regular expression “<code>\n</code>”.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_repeat">
<term><option>--repeat:<replaceable>number</replaceable></option></term>
<listitem>
<para>Repeat the parse <replaceable>number</replaceable> times. This option only really
exists for performance testing. If both <option>--repeat</option> and <option>--time</option>
are specified, a summary of total parse time over all repeats will be printed.</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_show-chart">
<term><option>--show-chart</option></term>
<listitem>
<para>Show the state chart used by the parser.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_show-grammar">
<term><option>--show-grammar</option></term>
<listitem>
<para>Show the grammar used by the parser.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_show-hidden-nonterminals" revisionflag="added">
<term><option>--show-hidden-nonterminals</option></term>
<listitem>
<para>Include hidden nonterminals in the output. This will include nonterminals from
the original grammar marked with “-” and also nonterminals generated by the
<link linkend="how">grammar transformation</link>.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_show-marks" revisionflag="added">
<term><option>--show-marks</option></term>
<listitem>
<para>Include marks in the output. These are added as <tag>ixml:mark</tag> attributes on
the elements.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_strict-ambiguity" revisionflag="added">
<term><option>--strict-ambiguity</option></term>
<listitem>
<para>When priorities or other mechanisms are used to select a parse
from an ambiguous forest, if those mechanisms successfully choose a unique parse,
the result <emphasis>will not</emphasis> be marked as ambiguous. Using the
<option>--strict-ambiguity</option> flag will always mark ambiguous parses as ambiguous.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_suppress">
<term><option>--suppress:<replaceable>state:state:…</replaceable></option></term>
<listitem>
<para>Suppress <code>ixml:state</code> values. The <code>ambiguous</code>
and <code>prefix</code> states can be suppressed.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_time">
<term><option>--time</option></term>
<listitem>
<para>Enables output of parse timings.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_time-records" revisionflag="added">
<term><option>--time-records</option></term>
<listitem>
<para>When using record-oriented input, this option enables output of timings for each record.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_unbuffered">
<term><option>--unbuffered</option></term>
<listitem>
<para>If this option is enabled, multiple parses will be output as soon as they’re available.
The resulting output will not have a wrapper to assure well-formedness.
</para>
</listitem>
</varlistentry>
<varlistentry xml:id="_version">
<term><option>--version</option></term>
<listitem>
<para>Display the <application>CoffeePot</application> version number.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="buildtools">
<title>In build tools</title>

<para>The <link xlink:href="https://github.com/nineml/HOWTO">HOWTO</link> repository
contains examples of using <application>CoffeePot</application> in build tools
such as Gradle.</para>

</section>
</chapter>
