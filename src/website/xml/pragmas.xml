<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi='http://www.w3.org/2001/XInclude'
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="pragmas"
         version="5.2">
<title>Pragmas</title>

<para>It’s possible to influence the behavior of the processor by placing
pragmas in your grammar.</para>

<important>
<title>Experimental</title>
<para>Pragmas are a separate feature; they are not part of Invisible XML 1.0.
As of 4 September 2022, the pragma syntax accepted by
<link xlink:href="https://coffeefilter.nineml.org/">CoffeeFilter</link> (and
<application>CoffeePot</application>) has been updated to the grammar described in
<citetitle xlink:href="https://balisage.net/Proceedings/vol27/html/Sperberg-McQueen01/BalisageVol27-Sperberg-McQueen01.html">Designing for change: Pragmas in Invisible XML as an extensibility
mechanism</citetitle> presented at
<link xlink:href="https://balisage.net/">Balisage</link>, 2022.</para>
<para>If you run <application>CoffeePot</application> with the
<option>--pedantic</option> option, you cannot use pragmas.</para>
</important>

<para>A pragma begins with “<code>{[</code>” and is followed by a pragma
name, pragma data (which may be empty), and closes with
“<code>]}</code>”. The pragma name is a shortcut for a URI which provides
the “real” identity of the pragma. This mechanism leverages URI space to achieve
distributed extensibility.</para>

<para>The mapping from names to URIs is done with the
“<code>pragma</code>” pragma at the top of your grammar. This, for example,
declares the name “<code>nineml</code>” as the pragma identified by the
URI “<code>https://nineml.org/ns/pragma/</code>”:</para>

<programlisting>{[+pragma nineml "https://nineml.org/ns/pragma/"]}</programlisting>

<para><application>CoffeePot</application> ignores any pragmas it does
not recognize. The rest of this document assumes that you have
declared the pragma name “<code>nineml</code>” as shown above. You
must do this in every grammar file where you use pragmas.</para>

<para>Pragmas can be associated with the entire grammar or with a rule,
a nonterminal symbol, or a terminal symbol:</para>

<orderedlist>
<listitem>
<para>A pragma placed before a symbol applies to the symbol that follows it:
</para>
<programlisting>rule: {[pragma applies to “A”]} A,
      {[pragma applies to “b”]} 'b'.</programlisting>
</listitem>
<listitem>
<para>A pragma placed before a rule, applies to the rule that follows it:
</para>
<programlisting>{[pragma applies to “rule”]}
rule: {[pragma applies to “A”]} A,
      {[pragma applies to “b”]} 'b'.</programlisting>
</listitem>
<listitem>
<para>To apply a pragma to the entire grammar, it must be in the prolog.</para>

<programlisting>{[+pragma applies to whole grammar]}

{[pragma applies to “rule”]}
rule: {[pragma applies to “A”]} A,
      {[pragma applies to “b”]} 'b'.</programlisting>
</listitem>
</orderedlist>

<para>More than one pragma can appear at any of those locations:</para>

<programlisting>{[+pragma applies to whole grammar]}
{[+second pragma applies to whole grammar ]}

{[pragma applies to “rule”]}
{[second pragma applies to “rule”]}
rule:
   {[pragma applies to “A”]}
   {[second pragma applies to “A”]} A,
   {[pragma applies to “b”]}
   {[second pragma applies to “b”]} 'b'.</programlisting>

<para>If a pragma is not recognized, or does not apply, it is ignored.
<application>CoffeePot</application> will generate debug-level log messages to alert you to
pragmas that it is ignoring.</para>

<section xml:id="pragmas-grammar">
<title>Grammar pragmas</title>

<para>There following pragmas apply to a grammar as a whole.</para>

<section xml:id="pragma-csv-columns">
<title>csv-columns</title>

<para>Identifies the columns to be output when
<link linkend="output-csv">CSV output</link> is selected.</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[+nineml csv-columns <replaceable>list,of,names</replaceable>]}</synopsis>

<para>Ordinarily, CSV formatted output includes all the columns in (roughly)
the order they occur in the XML. This pragma allows you to list the
columns you want output and the order in which you want them output.</para>

<para>If a column requested does not exist in the document, it is
ignored. An empty column is not produced.</para>

</section>

<section xml:id="pragma-import">
<title>import</title>

<para>Allows one grammar to import another.</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[+nineml import "grammar-uri"]}</synopsis>

<para>In principle, this pragma allows you to combine grammars. This feature
is experimental and no coherent semantics have yet been established.</para>

</section>

<section xml:id="pragma-ns">
<title>ns</title>

<para>Declares the default namespace for the output XML.</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[+nineml ns "namespace-uri"]}</synopsis>

</section>

<section xml:id="pragma-record-end">
<title>record-end</title>

<para>The <code>record-end</code> pragma enables record-oriented processing by
default. It’s value is the regular expression that marks record ends. Unlike the
other pragmas, this one has a different URI binding:
</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[+pragma opt "https://nineml.org/ns/pragma/options/"]}
{[+opt record-end "\n([^ ])"]}</synopsis>

</section>

<section xml:id="pragma-record-start">
<title>record-start</title>

<para>The <code>record-start</code> pragma enables record-oriented processing by
default. It’s value is the regular expression that marks record starts. Unlike the
other pragmas, this one has a different URI binding:
</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[+pragma opt "https://nineml.org/ns/pragma/options/"]}
{[+opt record-start "([^\\])\n"]}</synopsis>

</section>

</section>

<section xml:id="pragmas-rules">
<title>Rule pragmas</title>

<para>There following pragmas apply to a rules.</para>

<section xml:id="pragma-csv-heading">
<title>csv-heading</title>

<para>Specify the heading title to use in CSV output if the nonterminal defined
by this is used as the value of a column.</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[nineml xmlns "Heading Title"]}</synopsis>

</section>

<section xml:id="pragma-discard-empty">
<title>discard-empty</title>

<para>If the nonterminal defined by this rule is empty, it will be discarded (not
serialized at all).</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[nineml discard empty]}</synopsis>

</section>

<!--
<section xml:id="pragma-combine">
<title>combine</title>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[nineml combine]}</synopsis>

</section>
<section xml:id="pragma-regex">
<title>regex</title>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[nineml regex "regular expression"]}</synopsis>

</section>
-->

</section>

<section xml:id="pragmas-symbols">
<title>Symbol pragmas</title>

<para>The following pragmas that apply to a symbols.</para>

<section xml:id="pragma-rename">
<title>rename</title>

<para>This pragma changes the name used when the element is serialized. It applies
only to nonterminals.</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[nineml rename newname]}</synopsis>

</section>

<section xml:id="pragma-rewrite">
<title>rewrite</title>

<para>This pragma changes text output when the terminal. It applies
only to terminals.</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[nineml rewrite "new literal"]}</synopsis>

<para>This pragma was invented before Invisible XML added
<link xlink:href="https://invisiblexml.org/1.0/#L649">insertions</link>. The same effects
can be obtained with insertions (by suppressing one terminal and inserting another).
That is the preferred approach.</para>

</section>

<section xml:id="pragma-priority">
<title>priority</title>

<para>This pragma associates a priority with a nonterminal.</para>

<para>Usage:</para>
<synopsis linenumbering="unnumbered">{[nineml priority 1.5]}</synopsis>

<para>When an ambiguous parse is being serialized, there will be places in the
output where a choice must be made between two or more alternatives. A priority
can be used to control the selection. The nonterminal with the highest priority will
be selected. If there are no priorities, or if several nonterminals have the same priority,
no guarantees are made about which alternative will be selected. The default priority for
all nonterminals is 0.</para>

<para>Consider the following grammar:</para>

<programlisting language="ixml"> number: hex | decimal .
 hex: hex-digit+ .
 decimal: decimal-digit+ .
-hex-digit: ["0"-"9" | "a"-"f" | "A"-"F" ] .
-decimal-digit: ["0"-"9" ] .</programlisting>

<para>It parses numbers in either hexadecimal or decimal. In the case of a number like “42”, the
parse is ambiguous, it matches either hex or decimal:</para>

<screen><![CDATA[$ coffeepot --pretty-print -g:hex.ixml 42
Found 2 possible parses.
<number xmlns:ixml="http://invisiblexml.org/NS" ixml:state="ambiguous">
   <hex>42<hex>
</number>]]></screen>

<para>You can give decimal a higher priority:</para>

<programlisting language="ixml">{[+pragma nineml "https://nineml.org/ns/pragma/"]}

 number: hex | {[nineml priority 2]} decimal .
 hex: hex-digit+ .
 decimal: decimal-digit+ .
-hex-digit: ["0"-"9" | "a"-"f" | "A"-"F" ] .
-decimal-digit: ["0"-"9" ] .</programlisting>

<para>Now decimal will be selected:</para>

<screen><![CDATA[$ coffeepot --pretty-print -g:hex.ixml 42
Found 2 possible parses.
<number xmlns:ixml="http://invisiblexml.org/NS" ixml:state="ambiguous">
   <decimal>42</decimal>
</number>]]></screen>

<para>The parse is still considered ambiguous because there were two possible choices.</para>

<note>
<para>If a grammar is infinitely ambiguous, the same part of the parse may be serialized
more than once. When this happens, the selection is always between the remaining alternatives.
</para>
</note>

</section>
</section>

</chapter>
