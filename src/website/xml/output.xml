<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi='http://www.w3.org/2001/XInclude'
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="output-formats"
         version="5.2">
<title>Output formats</title>

<para><application>CoffeePot</application> can produce XML or JSON output of any
parse tree and CSV output of trees that are “simple enough”.
</para>

<para>Here’s a small grammar for a “contacts file”:</para>

<programlisting><![CDATA[contacts: (contact, NL*)+ .
contact: name, NL, (email, NL)?, (phone, NL)? .

name: letter, ~[#a; "@"]* .
email: username, "@", domainname .
phone: ["+0123456789()- "]+ .

-username: (letter; ["+-."])+ .
-domainname: (letter; ["+-."])+ .

-letter: [L] .
-NL: -#a ; -#d, -#a .]]></programlisting>

<para>Contacts are names, email addresses, and phone numbers on separate
lines. Contacts are separated by a blank line. For example:</para>

<programlisting linenumbering="unnumbered">John Doe
john@example.com
555-0100

Mary Smith
m.smith@estaff.example.com
+1-222-555-0102

Jane Doe
(512) 555-0105

Nancy Jones
nancy@example.org</programlisting>

<section xml:id="output-xml">
<title>XML</title>

<para>A conformant Invisible XML processor, parsing this data with the
grammar above, produces XML:</para>

<programlisting linenumbering="unnumbered"><![CDATA[<contacts>
   <contact>
      <name>John Doe</name>
      <email>john@example.com</email>
      <phone>555-0100</phone>
   </contact>
   <contact>
      <name>Mary Smith</name>
      <email>m.smith@estaff.example.com</email>
      <phone>+1-222-555-0102</phone>
   </contact>
   <contact>
      <name>Jane Doe</name>
      <phone>(512) 555-0105</phone>
   </contact>
   <contact>
      <name>Nancy Jones</name>
      <email>nancy@example.org</email>
   </contact>
</contacts>]]></programlisting>
</section>

<section xml:id="output-json">
<title>JSON</title>

<para>Today, there are lots of services that prefer JSON to XML, so
<application>coffeepot</application> provides an option to produce JSON,
<code>--format:json</code>:</para>

<programlisting linenumbering="unnumbered">{
  "contacts": {
    "contact": [
      {
        "name": "John Doe",
        "email": "john@example.com",
        "phone": "555-0100"
      },
      {
        "name": "Mary Smith",
        "email": "m.smith@estaff.example.com",
        "phone": "+1-222-555-0102"
      },
      {
        "name": "Jane Doe",
        "phone": "(512) 555-0105"
      },
      {
        "name": "Nancy Jones",
        "email": "nancy@example.org"
      }
    ]
  }
}</programlisting>

<para>There are, in fact, two different JSON output options,
<code>json-data</code> and <code>json-tree</code>. In “data” mode,
the names of nonterminals become the names of properties and siblings
are wrapped in an array.</para>

<para>The “tree” mode, JSON serialization produces a literal rendering
of the tree structure:</para>

<programlisting linenumbering="unnumbered">{
  "content": {
    "name": "contacts",
    "content": [
      {
        "name": "contact",
        "content": [
          {
            "name": "name",
            "content": "John Doe"
          },
          {
            "name": "email",
            "content": "john@example.com"
          },
          {
            "name": "phone",
            "content": "555-0100"
          }
        ]
      },
      {
        "name": "contact",
        "content": [
          {
            "name": "name",
            "content": "Mary Smith"
          },
          {
            "name": "email",
            "content": "m.smith@estaff.example.com"
          },
          {
            "name": "phone",
            "content": "+1-222-555-0102"
          }
        ]
      },
      {
        "name": "contact",
        "content": [
          {
            "name": "name",
            "content": "Jane Doe"
          },
          {
            "name": "phone",
            "content": "(512) 555-0105"
          }
        ]
      },
      {
        "name": "contact",
        "content": [
          {
            "name": "name",
            "content": "Nancy Jones"
          },
          {
            "name": "email",
            "content": "nancy@example.org"
          }
        ]
      }
    ]
  }
}</programlisting>

</section>
<section xml:id="output-csv">
<title>CSV</title>

<para>If the tree structure that results from the parse has a very
specific structure, it can be rendered into
<link xlink:href="https://en.wikipedia.org/wiki/Comma-separated_values">CSV</link>.
The document must contain no mixed content (ignoring whitespace-only text nodes)
and exactly three levels of hierarchy: a root element,
its children, and its grandchildren.</para>
<para>The names of the root node’s children are irrelevant, each one becomes
a row in the output. The names of the grandchildren elements become the names of columns.
There will be one column for each such unique name, even if not every child
contains the same grandchildren elements.</para>

<para>The contacts output satisfies these constraints, so it can be rendered in CSV:</para>

<programlisting linenumbering="unnumbered">"name","email","phone"
"John Doe","john@example.com","555-0100"
"Mary Smith","m.smith@estaff.example.com","+1-222-555-0102"
"Jane Doe",,"(512) 555-0105"
"Nancy Jones","nancy@example.org",</programlisting>

</section>
</chapter>
